"""update_audit_log_model

Revision ID: 7ba391ccb99f
Revises: d865d372faa3
Create Date: 2025-08-10 15:07:42.029787

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '7ba391ccb99f'
down_revision: Union[str, Sequence[str], None] = 'd865d372faa3'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    
    # First add new nullable columns
    op.add_column('audit_logs', sa.Column('old_values', sa.Text(), nullable=True))
    op.add_column('audit_logs', sa.Column('new_values', sa.Text(), nullable=True))
    op.add_column('audit_logs', sa.Column('ip_address', sa.String(length=45), nullable=True))
    op.add_column('audit_logs', sa.Column('user_agent', sa.Text(), nullable=True))
    
    # Update existing NULL values before adding constraints
    op.execute("UPDATE audit_logs SET performed_by_user_id = 1 WHERE performed_by_user_id IS NULL")
    op.execute("UPDATE audit_logs SET logged_by_user_id = 1 WHERE logged_by_user_id IS NULL")
    op.execute("UPDATE audit_logs SET created_by_user_id = 1 WHERE created_by_user_id IS NULL")
    
    # Now apply the NOT NULL constraints
    op.alter_column('audit_logs', 'action',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.alter_column('audit_logs', 'table_name',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.alter_column('audit_logs', 'record_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('audit_logs', 'description',
               existing_type=sa.VARCHAR(),
               type_=sa.Text(),
               existing_nullable=True)
    op.alter_column('audit_logs', 'performed_by_user_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('audit_logs', 'logged_by_user_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('audit_logs', 'created_by_user_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('audit_logs', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    
    # This seems unrelated to audit_logs - keep it at the end
    op.alter_column('employee_loans', 'status',
               existing_type=postgresql.ENUM('PENDING', 'APPROVED', 'REJECTED', name='loanstatus'),
               nullable=True)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('employee_loans', 'status',
               existing_type=postgresql.ENUM('PENDING', 'APPROVED', 'REJECTED', name='loanstatus'),
               nullable=False)
    op.alter_column('audit_logs', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.alter_column('audit_logs', 'created_by_user_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.alter_column('audit_logs', 'logged_by_user_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.alter_column('audit_logs', 'performed_by_user_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.alter_column('audit_logs', 'description',
               existing_type=sa.Text(),
               type_=sa.VARCHAR(),
               existing_nullable=True)
    op.alter_column('audit_logs', 'record_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.alter_column('audit_logs', 'table_name',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.alter_column('audit_logs', 'action',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.drop_column('audit_logs', 'user_agent')
    op.drop_column('audit_logs', 'ip_address')
    op.drop_column('audit_logs', 'new_values')
    op.drop_column('audit_logs', 'old_values')
    # ### end Alembic commands ###