"""Initial clean migration

Revision ID: b1403f792725
Revises: 
Create Date: 2025-07-29 15:08:38.140968

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'b1403f792725'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - adjusted manually ###
    op.drop_table('employee_holidays')
    op.drop_index(op.f('ix_holiday_calendars_id'), table_name='holiday_calendars')
    op.drop_table('holiday_calendars')

    # Step 1: Add as nullable first
    op.add_column('recruitments', sa.Column('job_title', sa.String(), nullable=True))
    op.add_column('recruitments', sa.Column('posted_date', sa.Date(), nullable=True))

    # Step 2: Fill in default values for existing rows
    op.execute("UPDATE recruitments SET job_title = 'Placeholder Title' WHERE job_title IS NULL")

    # Step 3: Alter to not nullable
    op.alter_column('recruitments', 'job_title', nullable=False)

    # Continue with rest of schema updates
    op.alter_column('recruitments', 'description',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)

    op.drop_constraint(op.f('recruitments_updated_by_user_id_fkey'), 'recruitments', type_='foreignkey')
    op.drop_constraint(op.f('recruitments_created_by_user_id_fkey'), 'recruitments', type_='foreignkey')
    op.create_foreign_key(None, 'recruitments', 'users', ['updated_by_user_id'], ['id'])
    op.create_foreign_key(None, 'recruitments', 'users', ['created_by_user_id'], ['id'])

    op.drop_column('recruitments', 'requirements')
    op.drop_column('recruitments', 'responsibilities')
    op.drop_column('recruitments', 'job_type')
    op.drop_column('recruitments', 'title')
    op.drop_column('recruitments', 'work_mode')
    op.drop_column('recruitments', 'openings')
    op.drop_column('recruitments', 'location')
    op.drop_column('recruitments', 'salary')
    op.drop_column('recruitments', 'job_level')
    op.drop_column('recruitments', 'status')
    # ### end Alembic commands ###



def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('recruitments', sa.Column('status', postgresql.ENUM('draft', 'active', 'paused', 'closed', 'cancelled', name='jobstatus'), autoincrement=False, nullable=True))
    op.add_column('recruitments', sa.Column('job_level', postgresql.ENUM('entry', 'junior', 'mid', 'senior', 'lead', 'manager', 'director', 'executive', name='joblevel'), autoincrement=False, nullable=True))
    op.add_column('recruitments', sa.Column('salary', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('recruitments', sa.Column('location', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('recruitments', sa.Column('openings', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('recruitments', sa.Column('work_mode', postgresql.ENUM('onsite', 'remote', 'hybrid', name='workmode'), autoincrement=False, nullable=True))
    op.add_column('recruitments', sa.Column('title', sa.VARCHAR(), autoincrement=False, nullable=False))
    op.add_column('recruitments', sa.Column('job_type', postgresql.ENUM('full_time', 'part_time', 'contract', 'internship', 'freelance', name='jobtype'), autoincrement=False, nullable=True))
    op.add_column('recruitments', sa.Column('responsibilities', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('recruitments', sa.Column('requirements', sa.TEXT(), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'recruitments', type_='foreignkey')
    op.drop_constraint(None, 'recruitments', type_='foreignkey')
    op.create_foreign_key(op.f('recruitments_created_by_user_id_fkey'), 'recruitments', 'users', ['created_by_user_id'], ['id'], ondelete='SET NULL')
    op.create_foreign_key(op.f('recruitments_updated_by_user_id_fkey'), 'recruitments', 'users', ['updated_by_user_id'], ['id'], ondelete='SET NULL')
    op.alter_column('recruitments', 'description',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.drop_column('recruitments', 'posted_date')
    op.drop_column('recruitments', 'job_title')
    op.create_table('holiday_calendars',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('holiday_calendars_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('title', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('is_optional', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('is_national', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('department_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_by_user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('updated_by_user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', sa.DATE(), server_default=sa.text('CURRENT_DATE'), autoincrement=False, nullable=True),
    sa.Column('updated_at', sa.DATE(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['created_by_user_id'], ['users.id'], name='holiday_calendars_created_by_user_id_fkey'),
    sa.ForeignKeyConstraint(['department_id'], ['departments.id'], name='holiday_calendars_department_id_fkey'),
    sa.ForeignKeyConstraint(['updated_by_user_id'], ['users.id'], name='holiday_calendars_updated_by_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='holiday_calendars_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('ix_holiday_calendars_id'), 'holiday_calendars', ['id'], unique=False)
    op.create_table('employee_holidays',
    sa.Column('holiday_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('employee_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['employee_id'], ['employees.id'], name=op.f('employee_holidays_employee_id_fkey')),
    sa.ForeignKeyConstraint(['holiday_id'], ['holiday_calendars.id'], name=op.f('employee_holidays_holiday_id_fkey'))
    )
    # ### end Alembic commands ###
